// This file was autogenerated from Opc.Ua.NodeSet2.Part999.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

#[allow(unused_imports)]
use opcua_types::{
    node_id::NodeId,
    data_value::DataValue,
    variant::Variant, 
    extension_object::ExtensionObject, 
    string::UAString,
    basic_types::LocalizedText,
    service_types::{
        Argument
    },
    node_ids::*
};
#[allow(unused_imports)]
use crate::address_space::types::*;

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_datatype_1(address_space);
    add_variable_2(address_space);
}

fn add_datatype_1(address_space: &mut AddressSpace) {
    // DataType
    let name = "EnumeratedTestType";
    let node_id = NodeId::new(0, 398);
    let mut node = DataType::new(&node_id, name, name, false);
    node.set_description(LocalizedText::from("A simple enumerated type used for testing."));
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11886), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_2(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnumValues";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11886);
    let node = Variable::new_data_value(&node_id, name, name, DataTypeId::from_u32(7594u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 398), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 398), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

